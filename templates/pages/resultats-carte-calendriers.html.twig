{% extends 'base.html.twig' %}

{% block main_content %}

    <div class="rich-text-block">
        {{ page.content|default|raw }}
    </div>

    {% include 'layout/header.html.twig' with ({
        'title': 'Carte des résultats',
        'subtitle': "Cartes et graphiques dynamiques qui vous permettent d’explorer et visualiser les données en temps réel de l’Observatoire des Saisons.<br>
                     <a href=#{path('export')} target=#'_blank' download>Exportez les données de l’Observatoire des Saisons</a>."
    }) %}

    <div class="criteria-container">
        <select name="type-species" id="type-species" class="criteria-list">
            <option value="0" selected class="default-criteria">Tous les types d’espèces</option>
            {% for typeSpecies in allTypeSpecies %}
                <option value="{{ typeSpecies.id }}">{{ typeSpecies.name|capitalize }}</option>
            {% endfor %}
        </select>

        <select name="species" id="species" class="criteria-list" data-selected-type-species="0">
            <option value="0" selected class="default-criteria">Toutes les espèces</option>
            {% for species in allSpecies %}
                <option
                        value="{{ species.id }}"
                        data-events-ids="{{ speciesEvents[species.id] }}"
                        data-type-species-id="{{ species.type.id }}"
                        hidden disabled
                >
                    {{ species.vernacularName }}
                </option>
            {% endfor %}
        </select>

        <select name="events" id="events" class="criteria-list">
            <option value="0" selected class="default-criteria">Tous les évènements</option>
            {% for event in events %}
                <option value="{{ event.id }}">{{ event.name|capitalize }} {{ event.stadeBbch }}</option>
            {% endfor %}
        </select>

        <select name="year" id="year" class="criteria-list">
            {% for i in minYear..'now'|date('Y') %}
                <option value="{{ i }}"{% if loop.last %} selected{% endif %}>{{ i }}</option>
            {% endfor %}
        </select>

        <select name="region" id="region" class="criteria-list">
            <option value="0">Toutes les régions</option>
            {% for id, region in regions %}
                <option value="{{ id }}">{{ region }}</option>
            {% endfor %}
        </select>

        <select name="department" id="department" class="criteria-list">
            <option value="0">Tous les départements</option>
            {% for id, department in departments %}
                <option value="{{ id }}">{{ department }}</option>
            {% endfor %}
        </select>
    </div>

    <div id="results-map" class="result-map"></div>

    <script>
        let dataRoute = "{{ path('export_filtered')|escape('js') }}";
        let stationUrlTemplate = "{{ path('stations_show', {slug: 'slugPlaceHolder'})|escape('js') }}";
    </script>


    {% include 'layout/header.html.twig' with ({
        'title': 'Calendrier phénologique par espèce',
        'subtitle': 'Ces graphiques représentent les données brutes saisies par les observateur.rice.s.'
    }) %}

    <div id="phenological-chart-container">
        <select name="species" id="species-phenological-chart" class="criteria-list">
            <option value="0" class="default-criteria" disabled>Choisissez une espèce</option>
            {% for species in allSpecies %}
                <option
                        value="{{ species.id }}"
                        {% if 'Lilas' == species.vernacularName %} selected{% endif %}
                >
                    {{ species.vernacularName }}
                </option>
            {% endfor %}
        </select>

        <select name="year" id="year-phenological-chart" class="criteria-list">
            <option value="0">Toutes les années</option>
            {% for i in minYear..'now'|date('Y') %}*
                <option value="{{ i }}">{{ i }}</option>
            {% endfor %}
        </select>

        <select name="region" id="region-phenological-chart" class="criteria-list">
            <option value="0">Toutes les régions</option>
            {% for id, region in regions %}
                <option value="{{ id }}">{{ region }}</option>
            {% endfor %}
        </select>

        <select name="department" id="department-phenological-chart" class="criteria-list">
            <option value="0">Tous les départements</option>
            {% for id, department in departments %}
                <option value="{{ id }}">{{ department }}</option>
            {% endfor %}
        </select>

        <div class="no-data alert alert-danger">Aucune donnée pour les critères demandés, veuillez modifier au
            moins un de vos critères</div>
        <div class="chart"></div>
    </div>

    {% include 'layout/header.html.twig' with ({
        'title': 'Évolution des stades par espèce'
    }) %}

    <div id="evolution-chart-container"  data-min-year="{{ minYear }}">
        <select name="species" id="species-evolution-chart" class="criteria-list">
            <option value="0" class="default-criteria" disabled>Choisissez une espèce</option>
            {% for species in allSpecies %}
                <option
                        value="{{ species.id }}"
                        data-events-ids="{{ speciesEvents[species.id] }}"
                        {% if 'Marronnier' == species.vernacularName %} selected{% endif %}
                >
                    {{ species.vernacularName }}
                </option>
            {% endfor %}
        </select>
        <select name="event" id="event-evolution-chart" class="criteria-list">
            <option value="0" class="default-criteria" disabled>Choisissez un évènement</option>
            {% for eventName, eventIds in eventsIds %}
                <option
                        value="{{ eventIds|join(',') }}"
                        {% if 'feuillaison' == eventName %} selected{% endif %}
                >
                    {{ eventName|capitalize }}
                </option>
            {% endfor %}
        </select>

        <select name="region" id="region-evolution-chart" class="criteria-list">
            <option value="0">Toutes les régions</option>
            {% for id, region in regions %}
                <option value="{{ id }}">{{ region }}</option>
            {% endfor %}
        </select>

        <select name="department" id="department-evolution-chart" class="criteria-list">
            <option value="0">Tous les départements</option>
            {% for id, department in departments %}
                <option value="{{ id }}">{{ department }}</option>
            {% endfor %}
        </select>

        <div class="no-data alert alert-danger">Aucune donnée pour les critères demandés, veuillez modifier au
            moins un de vos critères</div>
        <div class="chart"></div>
    </div>


    <script>
        let exportRoute = "{{ path('export_filtered')|escape('js') }}";
        let eventsEvolutionRoute = "{{ path('events_evolution')|escape('js') }}";
    </script>

    <div id="container"></div>

    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .tooltip {
            position: absolute;
            background-color: white;
            border: 1px solid #ccc;
            padding: 5px;
            pointer-events: none;
            font-size: 12px;
        }
    </style>
    <script>
        // Example observation data
        const observation = [
            {date: new Date("2020-02-07"), category: "Arbre", espece: "abricotier"},
            {date: new Date("2020-02-01"), category: "Arbre", espece: "abricotier"},
            {date: new Date("2020-02-10"), category: "Arbre", espece: "abricotier"},
            {date: new Date("2020-04-15"), category: "Arbre", espece: "Cerisier"},
            {date: new Date("2020-04-20"), category: "Arbre", espece: "Cerisier"},
            {date: new Date("2020-04-01"), category: "Arbre", espece: "Cerisier"},
            // Add more data here
        ];

        // Function to calculate first, median, and last dates for each species
        function preprocessData(data) {
            const nested = d3.groups(data, d => d.espece);
            const result = nested.map(([espece, values]) => {
                const dates = values.map(d => d.date).sort(d3.ascending);
                return {
                    espece,
                    first: dates[0],
                    median: dates[Math.floor(dates.length / 2)],
                    last: dates[dates.length - 1]
                };
            });
            return result;
        }

        function chart(data) {
            const preprocessedData = preprocessData(data);

            // Specify the chart’s dimensions.
            const width = 928;
            const height = 600;
            const marginTop = 20;
            const marginRight = 20;
            const marginBottom = 30;
            const marginLeft = 100;

            // Create the positional scales.
            const x = d3.scaleUtc()
                .domain(d3.extent(data, d => d.date))
                .range([marginLeft, width - marginRight]);

            const y = d3.scalePoint()
                .domain(preprocessedData.map(d => d.espece))
                .range([marginTop, height - marginBottom])
                .padding(1);

            // Create the SVG container.
            const svg = d3.create("svg")
                .attr("width", width)
                .attr("height", height)
                .attr("viewBox", [0, 0, width, height])
                .attr("style", "max-width: 100%; height: auto; overflow: visible; font: 10px sans-serif;");

            // Add the horizontal axis.
            svg.append("g")
                .attr("transform", `translate(0,${height - marginBottom})`)
                .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));

            // Add the vertical axis.
            svg.append("g")
                .attr("transform", `translate(${marginLeft},0)`)
                .call(d3.axisLeft(y))
                .call(g => g.select(".domain").remove())
                .call(g => g.append("text")
                    .attr("x", -marginLeft)
                    .attr("y", 10)
                    .attr("fill", "currentColor")
                    .attr("text-anchor", "start")
                    .text("Espèce"));

            // Add the rectangles and lines for first, median, and last dates.
            const speciesGroup = svg.append("g")
                .selectAll("g")
                .data(preprocessedData)
                .join("g")
                .attr("transform", d => `translate(0,${y(d.espece)})`);

            speciesGroup.append("rect")
                .attr("x", d => x(d.first))
                .attr("width", d => x(d.last) - x(d.first))
                .attr("y", -5)
                .attr("height", 10)
                .attr("fill", "lightblue")
                .attr("stroke", "steelblue");

            speciesGroup.append("line")
                .attr("x1", d => x(d.median))
                .attr("x2", d => x(d.median))
                .attr("y1", -5)
                .attr("y2", 5)
                .attr("stroke", "red")
                .attr("stroke-width", 2);

            // Add points for first, median, and last dates.
            const points = speciesGroup.selectAll("circle")
                .data(d => [
                    {date: d.first, espece: d.espece},
                    {date: d.median, espece: d.espece},
                    {date: d.last, espece: d.espece}
                ])
                .join("circle")
                .attr("cx", d => x(d.date))
                .attr("cy", 0)
                .attr("r", 5)
                .attr("fill", "steelblue");

            // Add tooltip element
            const tooltip = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("opacity", 0);

            // Add tooltip interactivity
            points.on("mouseover", (event, d) => {
                tooltip.transition().duration(200).style("opacity", .9);
                tooltip.html(`Species: ${d.espece}<br>Date: ${d.date.toLocaleDateString()}`)
                    .style("left", (event.pageX + 5) + "px")
                    .style("top", (event.pageY - 28) + "px");
            })
                .on("mousemove", (event) => {
                    tooltip.style("left", (event.pageX + 5) + "px")
                        .style("top", (event.pageY - 28) + "px");
                })
                .on("mouseout", () => {
                    tooltip.transition().duration(500).style("opacity", 0);
                });

            return svg.node();
        }

        // Append the created chart to the container div
        document.getElementById("container").appendChild(chart(observation));
    </script>

{% endblock %}
