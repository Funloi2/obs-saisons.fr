{% extends 'base.html.twig' %}

{% block main_content %}

    <div class="rich-text-block">
        {{ page.content|default|raw }}
    </div>

    {% include 'layout/header.html.twig' with ({
        'title': 'Carte des résultats',
        'subtitle': "Cartes et graphiques dynamiques qui vous permettent d’explorer et visualiser les données en temps réel de l’Observatoire des Saisons.<br>
                     <a href=#{path('export')} target=#'_blank' download>Exportez les données de l’Observatoire des Saisons</a>."
    }) %}

    <div class="criteria-container">
        <select name="type-species" id="type-species" class="criteria-list">
            <option value="0" selected class="default-criteria">Tous les types d’espèces</option>
            {% for typeSpecies in allTypeSpecies %}
                <option value="{{ typeSpecies.id }}">{{ typeSpecies.name|capitalize }}</option>
            {% endfor %}
        </select>

        <select name="species" id="species" class="criteria-list" data-selected-type-species="0">
            <option value="0" selected class="default-criteria">Toutes les espèces</option>
            {% for species in allSpecies %}
                <option
                        value="{{ species.id }}"
                        data-events-ids="{{ speciesEvents[species.id] }}"
                        data-type-species-id="{{ species.type.id }}"
                        hidden disabled
                >
                    {{ species.vernacularName }}
                </option>
            {% endfor %}
        </select>

        <select name="events" id="events" class="criteria-list">
            <option value="0" selected class="default-criteria">Tous les évènements</option>
            {% for event in events %}
                <option value="{{ event.id }}">{{ event.name|capitalize }} {{ event.stadeBbch }}</option>
            {% endfor %}
        </select>

        <select name="year" id="year" class="criteria-list">
            {% for i in minYear..'now'|date('Y') %}
                <option value="{{ i }}"{% if loop.last %} selected{% endif %}>{{ i }}</option>
            {% endfor %}
        </select>

        <select name="region" id="region" class="criteria-list">
            <option value="0">Toutes les régions</option>
            {% for id, region in regions %}
                <option value="{{ id }}">{{ region }}</option>
            {% endfor %}
        </select>

        <select name="department" id="department" class="criteria-list">
            <option value="0">Tous les départements</option>
            {% for id, department in departments %}
                <option value="{{ id }}">{{ department }}</option>
            {% endfor %}
        </select>
    </div>

    <div id="results-map" class="result-map"></div>

    <script>
        let dataRoute = "{{ path('export_filtered')|escape('js') }}";
        let stationUrlTemplate = "{{ path('stations_show', {slug: 'slugPlaceHolder'})|escape('js') }}";
    </script>


    {% include 'layout/header.html.twig' with ({
        'title': 'Calendrier phénologique par espèce',
        'subtitle': 'Ces graphiques représentent les données brutes saisies par les observateur.rice.s.'
    }) %}

    <div id="phenological-chart-container">
        <select name="species" id="species-phenological-chart" class="criteria-list">
            <option value="0" class="default-criteria" disabled>Choisissez une espèce</option>
            {% for species in allSpecies %}
                <option
                        value="{{ species.id }}"
                        {% if 'Lilas' == species.vernacularName %} selected{% endif %}
                >
                    {{ species.vernacularName }}
                </option>
            {% endfor %}
        </select>

        <select name="year" id="year-phenological-chart" class="criteria-list">
            <option value="0">Toutes les années</option>
            {% for i in minYear..'now'|date('Y') %}*
                <option value="{{ i }}">{{ i }}</option>
            {% endfor %}
        </select>

        <select name="region" id="region-phenological-chart" class="criteria-list">
            <option value="0">Toutes les régions</option>
            {% for id, region in regions %}
                <option value="{{ id }}">{{ region }}</option>
            {% endfor %}
        </select>

        <select name="department" id="department-phenological-chart" class="criteria-list">
            <option value="0">Tous les départements</option>
            {% for id, department in departments %}
                <option value="{{ id }}">{{ department }}</option>
            {% endfor %}
        </select>

        <div class="no-data alert alert-danger">Aucune donnée pour les critères demandés, veuillez modifier au
            moins un de vos critères
        </div>
        <div class="chart"></div>
    </div>

    {% include 'layout/header.html.twig' with ({
        'title': 'Évolution des stades par espèce'
    }) %}

    <div id="evolution-chart-container" data-min-year="{{ minYear }}">
        <select name="species" id="species-evolution-chart" class="criteria-list">
            <option value="0" class="default-criteria" disabled>Choisissez une espèce</option>
            {% for species in allSpecies %}
                <option
                        value="{{ species.id }}"
                        data-events-ids="{{ speciesEvents[species.id] }}"
                        {% if 'Marronnier' == species.vernacularName %} selected{% endif %}
                >
                    {{ species.vernacularName }}
                </option>
            {% endfor %}
        </select>
        <select name=event id="event-evolution-chart" class="criteria-list">
            <option value="0" class="default-criteria" disabled>Choisissez un évènement</option>
            {% for eventName, eventIds in eventsIds %}
                <option
                        value="{{ eventIds|join(',') }}"
                        {% if 'feuillaison' == eventName %} selected{% endif %}
                >
                    {{ eventName|capitalize }}
                </option>
            {% endfor %}
        </select>

        <select name="region" id="region-evolution-chart" class="criteria-list">
            <option value="0">Toutes les régions</option>
            {% for id, region in regions %}
                <option value="{{ id }}">{{ region }}</option>
            {% endfor %}
        </select>

        <select name="department" id="department-evolution-chart" class="criteria-list">
            <option value="0">Tous les départements</option>
            {% for id, department in departments %}
                <option value="{{ id }}">{{ department }}</option>
            {% endfor %}
        </select>

        <div class="no-data alert alert-danger">Aucune donnée pour les critères demandés, veuillez modifier au
            moins un de vos critères
        </div>
        <div class="chart"></div>
    </div>


    <script>
        let exportRoute = "{{ path('export_filtered')|escape('js') }}";
        let eventsEvolutionRoute = "{{ path('events_evolution')|escape('js') }}";
    </script>
    <div class="container mt-5">
        <h2>Graphique de densité d'observation par date</h2>
        <form method="get" action="{{ path('explorer-les-donnees') }}">
            <div class="mb-3 selectMultiple" data-placeholder="Select species">
                <label for="species" class="form-label">Filtrer par espèces</label>
                <div>
                    <select name="species[]" id="species-select" class="form-select" multiple>
                        {% for specie in allSpecies %}
                            <option value="{{ specie.id }}" {% if specie.id in selectedSpeciesIds %}selected{% endif %}>
                                {{ specie.vernacularName }}
                            </option>
                        {% endfor %}
                    </select>
                </div>
                <p id="species-limit-message" class="text-danger" style="display: none;">You can select up to 7 species.</p>
            </div>
            <div class="mb-3 selectMultiple" data-placeholder="Select event">
                <label for="event" class="form-label">Filtrer par stade</label>
                <div>
                    <select class="form-select" name="event[]" multiple id="event-select">
                        <option value="">Tous stades</option>
                        {% for event in events %}
                            <option value="{{ event.id }}" {% if selectedEventId == event.id %}selected{% endif %}>
                                {{ event.name }}{% if event.stadeBbch is not empty %} - {{ event.stadeBbch }}{% endif %}
                            </option>
                        {% endfor %}
                    </select>
                </div>
            </div>
            <div class="mb-3 selectMultiple" data-placeholder="Select year">
                <label for="year" class="form-label">Filtrer par année</label>
                <div>
                    <select class="form-select" name="year[]" multiple id="year-select">
                        <option value="1">Toutes années</option>
                        {% for i in minYear..'now'|date('Y') %}
                            <option value="{{ i }}" {% if selectedYear == i %}selected{% endif %}>
                                {{ i }}
                            </option>
                        {% endfor %}
                    </select>
                </div>
            </div>
            <button class="btn btn-primary" type="submit">Filtrer</button>
        </form>
        {% if observations is empty %}
            <div class="alert alert-danger">
                Aucune donnée pour les critères demandés, veuillez modifier au moins un de vos critères
            </div>
        {% endif %}
    </div>
    <div id="chart" class="mt-5"></div>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        .selectMultiple select {
            display: none;
        }

        .selectMultiple > div {
            position: relative;
            padding: 8px 12px 2px;
            border-radius: 8px;
            background: #fff;
            font-size: 14px;
            min-height: 44px;
            box-shadow: 0 4px 16px rgba(22, 42, 90, 0.12);
            transition: box-shadow 0.3s ease;
        }

        .selectMultiple > div:hover {
            box-shadow: 0 4px 24px -1px rgba(22, 42, 90, 0.20);
        }

        .selectMultiple > div .arrow {
            position: absolute;
            right: 1px;
            top: 0;
            bottom: 0;
            cursor: pointer;
            width: 28px;
        }

        .selectMultiple > div .arrow:before,
        .selectMultiple > div .arrow:after {
            content: '';
            position: absolute;
            width: 2px;
            height: 8px;
            border-bottom: 8px solid #99A3BA;
            top: 43%;
            transition: all 0.3s ease;
        }

        .selectMultiple > div .arrow:before {
            right: 12px;
            transform: rotate(-130deg);
        }

        .selectMultiple > div .arrow:after {
            left: 9px;
            transform: rotate(130deg);
        }

        .selectMultiple > div span {
            color: #99A3BA;
            display: block;
            position: absolute;
            left: 12px;
            cursor: pointer;
            top: 8px;
            line-height: 28px;
            transition: all 0.3s ease;
        }

        .selectMultiple > div span.hide {
            opacity: 0;
            visibility: hidden;
            transform: translate(-4px, 0);
        }

        .selectMultiple > div a {
            position: relative;
            padding: 0 24px 6px 8px;
            line-height: 28px;
            color: #1E2330;
            display: inline-block;
            vertical-align: top;
            margin: 0 6px 0 0;
        }

        .selectMultiple > div a em {
            font-style: normal;
            display: block;
            white-space: nowrap;
        }

        .selectMultiple > div a:before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 6px;
            width: 100%;
            background: rgba(228, 236, 250, 0.7);
            z-index: -1;
            border-radius: 4px;
        }

        .selectMultiple > div a i {
            cursor: pointer;
            position: absolute;
            top: 0;
            right: 0;
            width: 24px;
            height: 28px;
        }

        .selectMultiple > div a i:before,
        .selectMultiple > div a i:after {
            content: '';
            width: 2px;
            height: 10px;
            position: absolute;
            left: 50%;
            top: 50%;
            background: #bcd35f;
            border-radius: 1px;
        }

        .selectMultiple > div a i:before {
            transform: translate(-50%, -50%) rotate(45deg);
        }

        .selectMultiple > div a i:after {
            transform: translate(-50%, -50%) rotate(-45deg);
        }

        .selectMultiple > div a.notShown {
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .selectMultiple > div a.notShown:before {
            width: 28px;
            transition: width 0.45s cubic-bezier(0.87, -0.41, 0.19, 1.44) 0.2s;
        }

        .selectMultiple > div a.notShown i {
            opacity: 0;
            transition: all 0.3s ease 0.3s;
        }

        .selectMultiple > div a.notShown em {
            opacity: 0;
            transform: translate(-6px, 0);
            transition: all 0.4s ease 0.3s;
        }

        .selectMultiple > div a.notShown.shown {
            opacity: 1;
        }

        .selectMultiple > div a.notShown.shown:before {
            width: 100%;
        }

        .selectMultiple > div a.notShown.shown i {
            opacity: 1;
        }

        .selectMultiple > div a.notShown.shown em {
            opacity: 1;
            transform: translate(0, 0);
        }

        .selectMultiple > div a.remove:before {
            width: 28px;
            transition: width 0.4s cubic-bezier(0.87, -0.41, 0.19, 1.44);
        }

        .selectMultiple > div a.remove i {
            opacity: 0;
            transition: all 0.3s ease;
        }

        .selectMultiple > div a.remove em {
            opacity: 0;
            transform: translate(-12px, 0);
            transition: all 0.4s ease;
        }

        .selectMultiple > div a.remove.disappear {
            opacity: 0;
            transition: opacity 0.5s ease;
        }

        .selectMultiple > ul {
            margin: 0;
            padding: 0;
            list-style: none;
            font-size: 16px;
            z-index: 9999;
            position: absolute;
            top: calc(100% + 5px);
            left: 0;
            right: 0;
            visibility: hidden;
            opacity: 0;
            border-radius: 8px;
            transform: translate(0, 20px) scale(0.8);
            transform-origin: 0 0;
            filter: drop-shadow(0 12px 20px rgba(22, 42, 90, 0.08));
            transition: all 0.4s ease, transform 0.4s cubic-bezier(0.87, -0.41, 0.19, 1.44), filter 0.3s ease 0.2s;
            max-height: 200px;
            overflow-y: auto;
        }

        .selectMultiple > ul li {
            color: #1E2330;
            background: #fff;
            padding: 12px 16px;
            cursor: pointer;
            overflow: hidden;
            position: relative;
            transition: background 0.3s ease, color 0.3s ease, transform 0.3s ease 0.3s, opacity 0.5s ease 0.3s, border-radius 0.3s ease 0.3s;
        }

        .selectMultiple > ul li:first-child {
            border-radius: 8px 8px 0 0;
        }

        .selectMultiple > ul li:first-child:last-child,
        .selectMultiple > ul li:last-child:first-child {
            border-radius: 8px;
        }

        .selectMultiple > ul li:last-child {
            border-radius: 0 0 8px 8px;
        }

        .selectMultiple > ul li:hover {
            background: #bcd35f;
            color: #000;
        }

        .selectMultiple > ul li:after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 6px;
            height: 6px;
            background: rgba(0, 0, 0, 0.4);
            opacity: 0;
            border-radius: 100%;
            transform: scale(1) translate(-50%, -50%);
            transform-origin: 50% 50%;
        }

        .selectMultiple > ul li.beforeRemove {
            border-radius: 0 0 8px 8px;
        }

        .selectMultiple > ul li.beforeRemove:first-child {
            border-radius: 8px;
        }

        .selectMultiple > ul li.afterRemove {
            border-radius: 8px 8px 0 0;
        }

        .selectMultiple > ul li.afterRemove:last-child {
            border-radius: 8px;
        }

        .selectMultiple > ul li.remove {
            transform: scale(0);
            opacity: 0;
        }

        .selectMultiple > ul li.remove:after {
            animation: ripple 0.4s ease-out;
        }

        .selectMultiple > ul li.notShown {
            display: none;
            transform: scale(0);
            opacity: 0;
            transition: transform 0.35s ease, opacity 0.4s ease;
        }

        .selectMultiple > ul li.notShown.show {
            transform: scale(1);
            opacity: 1;
        }

        .selectMultiple.open > div {
            box-shadow: 0 4px 20px -1px rgba(22, 42, 90, 0.12);
        }

        .selectMultiple.open > div .arrow:before {
            transform: rotate(-50deg);
        }

        .selectMultiple.open > div .arrow:after {
            transform: rotate(50deg);
        }

        .selectMultiple.open > ul {
            transform: translate(0, 12px) scale(1);
            opacity: 1;
            visibility: visible;
            filter: drop-shadow(0 16px 24px rgba(22, 42, 90, 0.16));
        }

        @keyframes ripple {
            0% {
                transform: scale(0);
                opacity: 1;
            }
            25% {
                transform: scale(30);
                opacity: 1;
            }
            100% {
                opacity: 0;
                transform: scale(50);
            }
        }

        html {
            box-sizing: border-box;
            -webkit-font-smoothing: antialiased;
        }

        *,
        *::before,
        *::after {
            box-sizing: inherit;
        }

        .tooltip {
            position: absolute;
            background-color: white;
            border: 1px solid #ccc;
            padding: 5px;
            pointer-events: none;
            font-size: 12px;
        }

        .form-select[multiple] {
            height: auto;
            width: 100%;
        }

        .form-select[multiple] option {
            padding: 10px;
        }
    </style>

    <script>
        // Initialize the selectMultiple dropdown
        $(document).ready(function () {
            function initializeSelectMultiple(selector, multiple = true) {
                const select = $(selector);
                const options = select.find('option');
                const placeholder = select.closest('.selectMultiple').data('placeholder');

                const div = $('<div />').addClass('selectMultiple');
                const active = $('<div />');
                const list = $('<ul />');
                const span = $('<span />').text(placeholder).appendTo(active);

                options.each(function () {
                    const text = $(this).text();
                    if ($(this).is(':selected')) {
                        active.append($('<a />').html(`<em>${text}</em><i></i>`));
                        span.addClass('hide');
                    } else {
                        list.append($('<li />').text(text));
                    }
                });

                active.append($('<div />').addClass('arrow'));
                div.append(active).append(list);

                select.wrap(div);

                $(document).on('click', '.selectMultiple ul li', function () {
                    const select = $(this).closest('.selectMultiple');
                    const li = $(this);
                    if (!select.hasClass('clicked')) {
                        select.addClass('clicked');
                        li.prev().addClass('beforeRemove');
                        li.next().addClass('afterRemove');
                        li.addClass('remove');

                        // For single selection, check if there is already a selected item
                        if (!multiple && select.find('a').length > 0) {
                            // Remove the existing selected item
                            select.find('a').each(function () {
                                const a = $(this);
                                const text = a.find('em').text();
                                select.find('option').filter(function () {
                                    return $(this).text() === text;
                                }).prop('selected', false);
                                a.remove();
                            });
                        }

                        const a = $('<a />').addClass('notShown').html(`<em>${li.text()}</em><i></i>`).hide().appendTo(select.children('div'));
                        a.slideDown(400, function () {
                            setTimeout(function () {
                                a.addClass('shown');
                                select.children('div').children('span').addClass('hide');
                                select.find('option').filter(function () {
                                    return $(this).text() === li.text();
                                }).prop('selected', true);
                            }, 500);
                        });

                        setTimeout(function () {
                            li.prev().removeClass('beforeRemove');
                            li.next().removeClass('afterRemove');
                            li.slideUp(400, function () {
                                li.remove();
                                select.removeClass('clicked');
                            });
                        }, 600);
                    }
                });

                $(document).on('click', '.selectMultiple > div a', function () {
                    const select = $(this).closest('.selectMultiple');
                    const self = $(this);
                    self.removeClass().addClass('remove');
                    select.addClass('open');
                    setTimeout(function () {
                        self.addClass('disappear');
                        setTimeout(function () {
                            self.animate({
                                width: 0,
                                height: 0,
                                padding: 0,
                                margin: 0
                            }, 300, function () {
                                const li = $('<li />').text(self.children('em').text()).addClass('notShown').appendTo(select.find('ul'));
                                li.slideDown(400, function () {
                                    li.addClass('show');
                                    setTimeout(function () {
                                        select.find('option').filter(function () {
                                            return $(this).text() === self.children('em').text();
                                        }).prop('selected', false);
                                        if (!select.find('option:selected').length) {
                                            select.children('div').children('span').removeClass('hide');
                                        }
                                        li.removeClass();
                                    }, 400);
                                });
                                self.remove();
                            })
                        }, 300);
                    }, 400);
                });

                $(document).on('click', '.selectMultiple > div .arrow, .selectMultiple > div span', function () {
                    $(this).closest('.selectMultiple').toggleClass('open');
                });
            }

            // Initialize species selector
            initializeSelectMultiple('#species-select', true);

            // Initialize event and year selectors
            initializeSelectMultiple('#event-select', false);
            initializeSelectMultiple('#year-select', false);
        });

        const observation = [];
        {% for observation in observations %}
        observation.push({
            year: "{{ observation.date|date('Y') }}",
            date: "{{ observation.date|date('m-d') }}",  // Keep date as string for custom handling
            event: "{{ observation.event.name }} {{ observation.event.stadeBbch }}",
            espece: "{{ observation.individual.species.vernacularName }}"
        });
        {% endfor %}

        if (observation.length === 0) {
            document.querySelector(".no-data").style.display = "block";
        } else {
            function preprocessData(data) {
                const nested = d3.groups(data, d => d.year, d => `${d.espece}-${d.event}`);
                return nested.map(([year, values]) => {
                    return {
                        year,
                        speciesEvents: values.map(([key, events]) => {
                            const dates = events.map(d => d.date).sort();
                            const [espece, event] = key.split('-');
                            return {
                                espece,
                                event,
                                first: dates[0],
                                median: dates[Math.floor(dates.length / 2)],
                                last: dates[dates.length - 1],
                                values: events
                            };
                        })
                    };
                });
            }

            function computeDensity(data) {
                const dateCounts = {};
                data.forEach(d => {
                    if (!dateCounts[d.date]) {
                        dateCounts[d.date] = 0;
                    }
                    dateCounts[d.date]++;
                });

                const maxCount = Math.max(...Object.values(dateCounts));

                return data.map(d => ({
                    ...d,
                    density: dateCounts[d.date] / maxCount
                }));
            }

            function parseDate(md) {
                const [month, day] = md.split('-').map(Number);
                return {month, day};
            }

            function formatDate(md) {
                const [month, day] = md.split('-');
                return `${month}/${day}`;
            }
            function chart(data) {
                const preprocessedData = preprocessData(data);

                // Specify the chart’s dimensions.
                const width = 1280;
                const height = 1000; // Height for each graph
                const marginTop = 20;
                const marginRight = 20;
                const marginBottom = 30;
                const marginLeft = 200;
                const yearSpacing = 50; // Space between each year's graph

                // Create the positional scales.
                const x = d3.scaleLinear()
                    .domain([1, 12])  // months from 1 to 12
                    .range([marginLeft, width - marginRight]);

                // Create a color scale for species-events
                const colorScale = d3.scaleOrdinal(d3.schemeCategory10);

                // Get the container div
                const container = d3.select("#chart");

                preprocessedData.forEach((yearData, yearIndex) => {
                    // Create the SVG container for each graph.
                    const svg = container.append("svg")
                        .attr("width", width)
                        .attr("height", height)
                        .attr("viewBox", [0, 0, width, height])
                        .attr("style", "max-width: 100%; height: auto; overflow: visible; font: 10px sans-serif; margin-bottom: " + yearSpacing + "px;");

                    const y = d3.scalePoint()
                        .domain(yearData.speciesEvents.map(d => `${d.espece} - ${d.event}`))
                        .range([marginTop, height - marginBottom])
                        .padding(1);

                    // Add the horizontal axis.
                    svg.append("g")
                        .attr("transform", `translate(0,${height - marginBottom})`)
                        .call(d3.axisBottom(x).ticks(12).tickFormat(d => d3.timeFormat("%B")(new Date(2000, d - 1, 1))).tickSizeOuter(0))
                        .call(g => g.selectAll("text")
                            .style("font-size", "20px")
                            .style("font-family", "sans-serif"));

                    // Add the vertical axis.
                    svg.append("g")
                        .attr("transform", `translate(${marginLeft},0)`)
                        .call(d3.axisLeft(y))
                        .call(g => g.select(".domain").remove())
                        .call(g => g.selectAll("text")
                            .style("font-size", "20px")
                            .style("font-family", "sans-serif")
                            .style("padding", "5px")
                            .attr("dy", "0.35em")
                            .attr("dx", "-0.5em"))
                        .call(g => g.append("text")
                            .attr("x", -marginLeft)
                            .attr("y", marginTop - 10)
                            .attr("fill", "currentColor")
                            .attr("text-anchor", "start")
                            .style("font-size", "24px")
                            .style("font-weight", "bold")
                            .text(`${yearData.year} - Espèce - Event `))
                        .style("font-size", "20px");

                    // Add linear gradients for each event
                    const defs = svg.append("defs");

                    yearData.speciesEvents.forEach(d => {
                        const densities = computeDensity(d.values);
                        const gradientId = `gradient-${d.event.replace(/\s+/g, '-')}-${d.espece.replace(/\s+/g, '-')}-${yearData.year}`;

                        const gradient = defs.append("linearGradient")
                            .attr("id", gradientId)
                            .attr("x1", "0%")
                            .attr("x2", "100%")
                            .attr("y1", "0%")
                            .attr("y2", "0%");

                        const firstDate = parseDate(d.first);
                        const lastDate = parseDate(d.last);

                        // Ensure the gradient covers the full range
                        gradient.append("stop")
                            .attr("offset", "0%")
                            .attr("stop-color", colorScale(d.espece + '-' + d.event))
                            .attr("stop-opacity", 0.001);

                        densities.forEach(dataPoint => {
                            const parsedDate = parseDate(dataPoint.date);
                            const monthPos = ((parsedDate.month - firstDate.month) / (lastDate.month - firstDate.month)) * 100; // Position within the gradient
                            gradient.append("stop")
                                .attr("offset", `${monthPos}%`)
                                .attr("stop-color", colorScale(d.espece + '-' + d.event))
                                .attr("stop-opacity", 0.001 + 0.999 * dataPoint.density); // Gradient from 30% to 100%
                        });

                        gradient.append("stop")
                            .attr("offset", "100%")
                            .attr("stop-color", colorScale(d.espece + '-' + d.event))
                            .attr("stop-opacity", 0.001);
                    });

                    // Add the rectangles for first, median, and last dates.
                    const speciesGroup = svg.append("g")
                        .selectAll("g")
                        .data(yearData.speciesEvents)
                        .join("g")
                        .attr("transform", d => `translate(0,${y(`${d.espece} - ${d.event}`)})`);

                    speciesGroup.append("rect")
                        .attr("x", d => x(parseDate(d.first).month))
                        .attr("width", d => x(parseDate(d.last).month) - x(parseDate(d.first).month))
                        .attr("y", -5)
                        .attr("height", 10)
                        .attr("fill", d => `url(#gradient-${d.event.replace(/\s+/g, '-')}-${d.espece.replace(/\s+/g, '-')}-${yearData.year})`)
                        .attr("stroke", "none");

                    speciesGroup.append("line")
                        .attr("x1", d => x(parseDate(d.median).month))
                        .attr("x2", d => x(parseDate(d.median).month))
                        .attr("y1", -5)
                        .attr("y2", 5)
                        .attr("stroke", "red")
                        .attr("stroke-width", 2);

                    // Add points for first, median, and last dates.
                    const points = speciesGroup.selectAll("circle")
                        .data(d => [
                            {date: d.first, espece: d.espece, event: d.event},
                            {date: d.median, espece: d.espece, event: d.event},
                            {date: d.last, espece: d.espece, event: d.event}
                        ])
                        .join("circle")
                        .attr("cx", d => x(parseDate(d.date).month))
                        .attr("cy", 0)
                        .attr("r", 5)
                        .attr("fill", d => colorScale(d.espece + '-' + d.event));

                    // Add tooltip element
                    const tooltip = d3.select("body").append("div")
                        .attr("class", "tooltip")
                        .style("opacity", 0);

                    // Add tooltip interactivity
                    points.on("mouseover", (event, d) => {
                        tooltip.transition().duration(200).style("opacity", .9);
                        tooltip.html(`Species: ${d.espece}<br>Event: ${d.event}<br>Date: ${formatDate(d.date)}`)
                            .style("left", (event.pageX + 5) + "px")
                            .style("top", (event.pageY - 28) + "px");
                    })
                        .on("mousemove", (event) => {
                            tooltip.style("left", (event.pageX + 5) + "px")
                                .style("top", (event.pageY - 28) + "px");
                        })
                        .on("mouseout", () => {
                            tooltip.transition().duration(500).style("opacity", 0);
                        });
                });
            }

// Append the created chart to the container di


// Append the created chart to the container div
            document.getElementById("chart").appendChild(chart(observation));
        }
    </script>


    {#    TODO : Epaisseur de la ligne des observations à changer#}
    {#    TODO : Mettre une couleur fix par évenements #}
{#    TODO : Calendrier static par type d'espèce#}
    {#     Feuillaison : vert#}
    {#     Floraison : blue #}
    {#     Fructification : orange#}
    {#     fructification : rouge#}
    {#     Première apparition : violet#}
{#    regarder les points#}

{% endblock %}
